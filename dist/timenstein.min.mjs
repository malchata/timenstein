var e="[Timenstein] Can't continue because the required performance APIs are not supported in this browser.",r="[Timenstein] Can't create a performance mark because a handle wasn't given for it.",Timenstein=function(n){var t,a,i,s,o={},m={},u=!1,c=n&&"mark"in n&&"measure"in n&&"getEntriesByName"in n&&"clearMarks"in n&&"clearMeasures"in n,f=(e,r)=>e>=1&&e<=r,g=e=>"toJSON"in window.PerformanceEntry.prototype?n.getEntriesByName(e)[0].toJSON():JSON.parse(JSON.stringify(n.getEntriesByName(e)[0])),l=e=>{t&&console[a](e)};function Timenstein(r){return c?(u=!0,t=(r=r||{}).errorLogging||!0,a=/^(log|warn|error)$/.test(r.errorLogLevel)?r.errorLogLevel:"warn",i=r.namespace||"timenstein",s=r.namespaceDelimiter||"::",u):(l(e),u)}return Timenstein.prototype.mark=function(t,a){if(!u)return l(e),u;if(!t)return l(r),!1;if(t.indexOf(s)>-1)return l("[Timenstein] The given handle contains the namespace delimiter."),!1;var m,c=""+i+s+t;if(c in o&&o[c].locked)return l("[Timenstein] Can't create a performance mark for the given handle because it is locked."),!1;c in o?m=o[c].entries.length+1:(m=1,o[c]={locked:!1,entries:[]});var f=c+"-"+m;return n.mark(f),a&&(o[c].locked=!0),o[c].entries.push(g(f)),{markName:f,markNumber:m}},Timenstein.prototype.measure=function(t,a,c){if(!u)return l(e),u;if(!t)return l(r),!1;var p=""+i+s+t;if(p in o==!1)return l("[Timenstein] The given handle doesn't have any marks associated with it."),!1;var h=o[p].entries.length;if(h<2)return l("[Timenstein] The given handle must have at least two associated marks in order to make a measurement"),!1;if(!((a=a||1)<(c=c||h)&&c>a&&f(a,h)&&f(c,h)))return l("[Timenstein] The given measurement range is not valid for the handle given."),!1;p in m==!1&&(m[p]={entries:[]}),n.measure(p,g(t+"-"+a),g(t+"-"+c));var d=g(p);return d.startSegment=a,d.endSegment=c,m[p].entries.push(d),!0},Timenstein.prototype.clear=function(r,t){if(!u)return l(e),u;if(!/^m(arks|easures)$/i.test(r))return l('[Timenstein] When invoking the `clear` method, its sole argument must either be "marks" or "measures".'),!1;var a=r.substr(0,r.length-1);return n.getEntries().forEach(e=>{var o=e.entryType===a&&0===e.name.indexOf(""+i+s);t instanceof RegExp&&(o=o&&t.test(e.name)),o&&n["clear"+(r[0].toUpperCase()+r.slice(1))](e.name)}),!0},Timenstein.prototype.getMarks=()=>o,Timenstein.prototype.getMeasures=()=>m,Timenstein}(window.performance);export default Timenstein;
