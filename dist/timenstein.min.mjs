var e="[Timenstein] Can't continue because the required performance APIs are not supported in this browser.",r="[Timenstein] Can't create a performance mark because a handle wasn't given for it.",n='[Timenstein] This method requires its first argument to be a string of either "marks" or "measures".',Timenstein=function(t,i){var a,s,o,m,u,f={},c={},l=!1,h=i&&"mark"in i&&"measure"in i&&"getEntriesByName"in i&&"clearMarks"in i&&"clearMeasures"in i&&"PerformanceObserver"in t,d=(e,r)=>e>=1&&e<=r,p=e=>e.split("-")[0],g=e=>"toJSON"in t.PerformanceEntry.prototype?e.toJSON():JSON.parse(JSON.stringify(e)),v=e=>{a&&console[s](e)};function Timenstein(r){return h?(l=!0,a=(r=r||{}).errorLogging||!0,s=/^(log|warn|error)$/.test(r.errorLogLevel)?r.errorLogLevel:"warn",o=r.namespace||"timenstein",m=r.namespaceDelimiter||"::",u=r.segmentDelimiter||"-",new PerformanceObserver(e=>{e.getEntries().forEach(e=>{var{name:r,entryType:n}=e;if(0===r.indexOf(""+o+m)){if("mark"===n){var t=g(e),a=p(r),s=r.split("-")[1];t.segmentNumber=s,f[a].entries.push(t)}var u,l,h;if("measure"===n){var d=p(r),v=[(h=r.split("-"))[1],h[2]],T=g(e);T.startSegment=v[0],T.endSegment=v[1],T.resources=(u=e.startTime,l=e.startTime+e.duration,i.getEntriesByType("resource").filter(e=>e.startTime>=u&&e.responseEnd<=l).map(e=>g(e))),c[d].entries.push(T)}}})}).observe({entryTypes:["mark","measure"]})):v(e),l}return Timenstein.prototype.mark=function(n,t){if(!l)return v(e),l;if(!n)return v(r),!1;if(n.indexOf(m)>-1)return v("[Timenstein] The given handle contains the namespace delimiter."),!1;if(n.indexOf(u)>-1)return v("[Timenstein] The given handle contains the segment delimiter."),!1;var a,s=""+o+m+n;if(s in f&&f[s].locked)return v("[Timenstein] Can't create a performance mark for the given handle because it is locked."),!1;s in f?a=f[s].entries.length+1:(a=1,f[s]={locked:!1,entries:[]});var c=s+"-"+a;return i.mark(c),t&&(f[s].locked=!0),!0},Timenstein.prototype.measure=function(n,t,a){if(!l)return v(e),l;if(!n)return v(r),!1;if(n.indexOf(m)>-1)return v("[Timenstein] The given handle contains the namespace delimiter."),!1;if(n.indexOf(u)>-1)return v("[Timenstein] The given handle contains the segment delimiter."),!1;var s=""+o+m+n;if(!(s in f))return v("[Timenstein] The given handle doesn't have any marks associated with it."),!1;var h=f[s].entries.length;return h<2?(v("[Timenstein] The given handle must have at least two associated marks in order to make a measurement"),!1):(t=t||1)<(a=a||h)&&a>t&&d(t,h)&&d(a,h)?(s in c||(c[s]={entries:[]}),i.measure(s+"-"+t+"-"+a,s+"-"+t,s+"-"+a),!0):(v("[Timenstein] The given measurement range is not valid for the handle given."),!1)},Timenstein.prototype.clear=function(r,t){if(!l)return v(e),l;if(!/^m(arks|easures)$/i.test(r))return v(n),!1;var a=r.substr(0,r.length-1);return i.getEntries().forEach(e=>{var{name:n,entryType:s}=e,u=s===a&&0===n.indexOf(""+o+m);t instanceof RegExp&&(u=u&&t.test(n)),u&&i["clear"+(r[0].toUpperCase()+r.slice(1))](n)}),!0},Timenstein.prototype.get=(e,r)=>{var t;if("marks"===e)t=f;else{if("measures"!==e)return v(n),!1;t=c}if(r instanceof RegExp){var i={};return Object.keys(t).filter(e=>r.test(e)).forEach(e=>{i[e]=t[e]}),i}return t},Timenstein}(window,window.performance);export default Timenstein;
