var e="[Timenstein] Can't continue because the required performance APIs are not supported in this browser.",r="[Timenstein] Can't create a performance mark because a handle wasn't given for it.",Timenstein=function(n,t){var i,a,s,o,m={},u={},c=!1,f=t&&"mark"in t&&"measure"in t&&"getEntriesByName"in t&&"clearMarks"in t&&"clearMeasures"in t&&"PerformanceObserver"in n,p=(e,r)=>e>=1&&e<=r,l=e=>e.split("-")[0],g=e=>"toJSON"in n.PerformanceEntry.prototype?e.toJSON():JSON.parse(JSON.stringify(e)),h=e=>{i&&console[a](e)};function Timenstein(r){return f?(c=!0,i=(r=r||{}).errorLogging||!0,a=/^(log|warn|error)$/.test(r.errorLogLevel)?r.errorLogLevel:"warn",s=r.namespace||"timenstein",o=r.namespaceDelimiter||"::",new PerformanceObserver(e=>{e.getEntries().forEach(e=>{var{name:r,entryType:n}=e;if(0===r.indexOf(""+s+o)){if("mark"===n){var i=g(e),a=l(r),c=r.split("-")[1];i.segmentNumber=c,m[a].entries.push(i)}var f,p,h;if("measure"===n){var v=l(r),d=[(h=r.split("-"))[1],h[2]],k=g(e);k.startSegment=d[0],k.endSegment=d[1],k.resources=(f=e.startTime,p=e.startTime+e.duration,t.getEntriesByType("resource").filter(e=>e.startTime>=f&&e.responseEnd<=p).map(e=>g(e))),u[v].entries.push(k)}}})}).observe({entryTypes:["mark","measure"]})):h(e),c}return Timenstein.prototype.mark=function(n,i){if(!c)return h(e),c;if(!n)return h(r),!1;if(n.indexOf(o)>-1)return h("[Timenstein] The given handle contains the namespace delimiter."),!1;var a,u=""+s+o+n;if(u in m&&m[u].locked)return h("[Timenstein] Can't create a performance mark for the given handle because it is locked."),!1;u in m?a=m[u].entries.length+1:(a=1,m[u]={locked:!1,entries:[]});var f=u+"-"+a;return t.mark(f),i&&(m[u].locked=!0),!0},Timenstein.prototype.measure=function(n,i,a){if(!c)return h(e),c;if(!n)return h(r),!1;var f=""+s+o+n;if(!(f in m))return h("[Timenstein] The given handle doesn't have any marks associated with it."),!1;var l=m[f].entries.length;if(l<2)return h("[Timenstein] The given handle must have at least two associated marks in order to make a measurement"),!1;if(!((i=i||1)<(a=a||l)&&a>i&&p(i,l)&&p(a,l)))return h("[Timenstein] The given measurement range is not valid for the handle given."),!1;f in u||(u[f]={entries:[]});var g=f+"-"+i+"-"+a,v=f+"-"+i,d=f+"-"+a;return t.measure(g,v,d),!0},Timenstein.prototype.clear=function(r,n){if(!c)return h(e),c;if(!/^m(arks|easures)$/i.test(r))return h('[Timenstein] When invoking the `clear` method, its sole argument must either be "marks" or "measures".'),!1;var i=r.substr(0,r.length-1);return t.getEntries().forEach(e=>{var{name:a,entryType:m}=e,u=m===i&&0===a.indexOf(""+s+o);n instanceof RegExp&&(u=u&&n.test(a)),u&&t["clear"+(r[0].toUpperCase()+r.slice(1))](a)}),!0},Timenstein.prototype.getMarks=()=>m,Timenstein.prototype.getMeasures=()=>u,Timenstein}(window,window.performance);export default Timenstein;
