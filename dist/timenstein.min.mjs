var e="[Timenstein] Can't continue because the required performance APIs are not supported in this browser.",r="[Timenstein] Can't create a performance mark because a handle wasn't given for it.",Timenstein=function(n,t){var a,i,s,o,m={},u={},c=!1,f=t&&"mark"in t&&"measure"in t&&"getEntriesByName"in t&&"clearMarks"in t&&"clearMeasures"in t,l=e=>JSON.parse(JSON.stringify(e)),g=(e,r)=>e>=1&&e<=r,h=e=>t.getEntriesByName(e)[0],p=e=>{a&&console[i](e)};function Timenstein(r){return f?(c=!0,a=(r=r||{}).errorLogging||!0,i=/^(log|warn|error)$/.test(r.errorLogLevel)?r.errorLogLevel:"warn",s=r.namespace||"timenstein",o=r.namespaceDelimiter||"::",c):(p(e),c)}return Timenstein.prototype.mark=function(n,a){if(!c)return p(e),c;if(!n)return p(r),!1;if(n.indexOf(o)>-1)return p("[Timenstein] The given handle contains the namespace delimiter."),!1;var i,u=""+s+o+n;if(u in m&&m[u].locked)return p("[Timenstein] Can't create a performance mark for the given handle because it is locked."),!1;u in m?i=m[u].entries.length+1:(i=1,m[u]={locked:!1,entries:[]});var f=u+"-"+i;return t.mark(f),a&&(m[u].locked=!0),m[u].entries.push(l(h(f))),{markName:f,markNumber:i}},Timenstein.prototype.measure=function(n,a,i){if(!c)return p(e),c;if(!n)return p(r),!1;var f=""+s+o+n;if(f in m==!1)return p("[Timenstein] The given handle doesn't have any marks associated with it."),!1;var d=m[f].entries.length;if(d<2)return p("[Timenstein] The given handle must have at least two associated marks in order to make a measurement"),!1;if(!((a=a||1)<(i=i||d)&&i>a&&g(a,d)&&g(i,d)))return p("[Timenstein] The given measurement range is not valid for the handle given."),!1;f in u==!1&&(u[f]={entries:[]}),t.measure(f,h(n+"-"+a),h(n+"-"+i));var v=l(h(f));return v.startSegment=a,v.endSegment=i,u[f].entries.push(v),!0},Timenstein.prototype.clear=function(r,n){if(!c)return p(e),c;if(!/^m(arks|easures)$/i.test(r))return p('[Timenstein] When invoking the `clear` method, its sole argument must either be "marks" or "measures".'),!1;var a=r.substr(0,r.length-1);return t.getEntries().forEach(e=>{var i=e.entryType===a&&0===e.name.indexOf(""+s+o);n instanceof RegExp&&(i=i&&n.test(e.name)),i&&t["clear"+(r[0].toUpperCase()+r.slice(1))](e.name)}),!0},Timenstein.prototype.getMarks=()=>m,Timenstein.prototype.getMeasures=()=>u,Timenstein}(window,performance);export default Timenstein;
